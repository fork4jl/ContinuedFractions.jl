var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ContinuedFractions","category":"page"},{"location":"#ContinuedFractions","page":"Home","title":"ContinuedFractions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ContinuedFractions.","category":"page"},{"location":"#Function-Index","page":"Home","title":"Function Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This list is generated automatically, which may contain some internal unexported functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Function-Docs","page":"Home","title":"Function Docs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ContinuedFractions]","category":"page"},{"location":"#ContinuedFractions.ContinuedFractions","page":"Home","title":"ContinuedFractions.ContinuedFractions","text":"This module provides functionality for working with continued fractions.\n\n\n\n\n\n","category":"module"},{"location":"#ContinuedFractions.ContinuedFraction","page":"Home","title":"ContinuedFractions.ContinuedFraction","text":"ContinuedFraction{T<:Integer}\n\nAn abstract type representing a continued fraction with elements of type T,  where T is a subtype of Integer. This type serves as a base for defining specific types of continued fractions.\n\n\n\n\n\n","category":"type"},{"location":"#ContinuedFractions.ConvStateType","page":"Home","title":"ContinuedFractions.ConvStateType","text":"(Int, Rational{T}, Rational{T})\n\n\n\n\n\n","category":"type"},{"location":"#ContinuedFractions.ConvergentIterator","page":"Home","title":"ContinuedFractions.ConvergentIterator","text":"ConvergentIterator{T<:Integer, CF<:ContinuedFraction{T}}\nConvergentIterator(cf::ContinuedFraction{T}) where {T<:Integer}\n\nAn iterator type for generating the convergents of a continued fraction.\n\nFields\n\nThe fields of a structure are not part of the public API.\n\n\n\n\n\n","category":"type"},{"location":"#ContinuedFractions.FiniteContinuedFraction","page":"Home","title":"ContinuedFractions.FiniteContinuedFraction","text":"FiniteContinuedFraction{T<:Integer}\n\nA type of representation of rational numbers using finite term connected fractions with Integer quotients.\n\nFields\n\nThe fields of a structure are not part of the public API. Please use helper functions to access them, such as quotients.\n\nExamples\n\n\n\n\n\n","category":"type"},{"location":"#ContinuedFractions.IrrationalContinuedFraction","page":"Home","title":"ContinuedFractions.IrrationalContinuedFraction","text":"mutable IrrationalContinuedFraction{T<:Integer, C}\n\nRepresents a continued fraction for an irrational number.\n\nFields\n\nThe fields of a structure are not part of the public API. Please use helper functions to access them, such as quotients.\n\n\n\n\n\n","category":"type"},{"location":"#Base.length-Tuple{IrrationalContinuedFraction}","page":"Home","title":"Base.length","text":"length(cf::IrrationalContinuedFraction)\n\nThis function returns the length of the current quotients() array, not the maximum iterable length of IrrationalContinuedFraction.\n\nwarning: Warning\nDO-NOT use this function to do for-loop\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.continuedfraction-Union{Tuple{AbstractFloat}, Tuple{T}, Tuple{AbstractFloat, Type{T}}} where T<:Integer","page":"Home","title":"ContinuedFractions.continuedfraction","text":"continuedfraction(x::AbstractFloat, ::Type{T}=Int)\n\nBuild continued fraction from float point number x.\n\nExamples\n\njulia> continuedfraction(0.0)\nFiniteContinuedFraction{Int64}([0])\n\njulia> continuedfraction(1.0)\nFiniteContinuedFraction{Int64}([1])\n\njulia> continuedfraction(0.5)\nFiniteContinuedFraction{Int64}([0, 2])\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.continuedfraction-Union{Tuple{AbstractIrrational}, Tuple{T}, Tuple{AbstractIrrational, Type{T}}} where T<:Integer","page":"Home","title":"ContinuedFractions.continuedfraction","text":"continuedfraction(\n    c::AbstractIrrational,\n    ::Type{T}=Int\n    ; prec::Int=precision(BigFloat)\n) where {T<:Integer} -> IrrationalContinuedFraction{T,typeof(c)}\n\nConstructs an IrrationalContinuedFraction for the given irrational number c.\n\nArguments\n\nc: The irrational number for which the continued fraction is to be constructed.\nT: The type of the integers in the continued fraction.   Defaults to Int.\nprec: The precision to be used for the continued fraction.   Defaults to the precision of BigFloat (256).\n\nExamples\n\njulia> continuedfraction(pi)\nIrrationalContinuedFraction{Int64, Irrational{:π}}(256, Int64[])\n\njulia> continuedfraction(pi, BigInt)\nIrrationalContinuedFraction{BigInt, Irrational{:π}}(256, BigInt[])\n\njulia> continuedfraction(pi, BigInt; prec=1024)\nIrrationalContinuedFraction{BigInt, Irrational{:π}}(1024, BigInt[])\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.continuedfraction-Union{Tuple{Rational{T}}, Tuple{T}} where T<:Integer","page":"Home","title":"ContinuedFractions.continuedfraction","text":"continuedfraction(x::Rational{T})\n\nBuild continued fraction from Rational number x.\n\nExamples\n\njulia> continuedfraction(0//1)\nFiniteContinuedFraction{Int64}([0])\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.continuedfraction-Union{Tuple{T}, Tuple{Real, Real}, Tuple{Real, Real, Type{T}}} where T<:Integer","page":"Home","title":"ContinuedFractions.continuedfraction","text":"continuedfraction(x::Real, y::Real, ::Type{T}=Int)\n\nBuild continued fraction from the ratio of x and y.\n\nExamples\n\njulia> continuedfraction(3, 9)\nFiniteContinuedFraction{Int64}([0, 3])\n\njulia> continuedfraction(9, 3)\nFiniteContinuedFraction{Int64}([3])\n\njulia> continuedfraction(11, 9)\nFiniteContinuedFraction{Int64}([1, 4, 2])\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.convergents-Tuple","page":"Home","title":"ContinuedFractions.convergents","text":"convergents(x...) -> ConvergentIterator\n\nCompute the convergents of a input.\n\nReturns\n\nConvergentIterator: An iterator over the convergents of the continued fraction.\n\nSee continuedfraction\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.quotients-Tuple{ContinuedFraction}","page":"Home","title":"ContinuedFractions.quotients","text":"quotients(cf::ContinuedFraction) -> Vector{T}\n\nReturn the quotients of the given ContinuedFraction object cf.\n\nReturns\n\nA vector containing the quotients of the continued fraction.\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.quotients-Tuple{FiniteContinuedFraction}","page":"Home","title":"ContinuedFractions.quotients","text":"quotients(cf::FiniteContinuedFraction)\n\n\n\n\n\n","category":"method"},{"location":"#ContinuedFractions.quotients-Tuple{IrrationalContinuedFraction}","page":"Home","title":"ContinuedFractions.quotients","text":"quotients(cf::IrrationalContinuedFraction)\n\n\n\n\n\n","category":"method"}]
}
